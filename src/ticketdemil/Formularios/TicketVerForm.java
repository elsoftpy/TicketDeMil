/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ticketdemil.Formularios;

import global.ControladorMenu;
import global.DBConnection;
import global.OperacionesRegistros;
import global.PaletaColores;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author antit
 */
public class TicketVerForm extends javax.swing.JPanel {
    JPanel cardsPanel;
    
    TicketNuevoForm ticketNuevoForm = new TicketNuevoForm();
    TicketEditarForm ticketEditarForm = new TicketEditarForm();

    /**
     * Creates new form frmVerTickets
     */
    public TicketVerForm() {
        initComponents();
        this.setBackground(PaletaColores.peach);
        lblTituloForm.setForeground(Color.red);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTituloForm = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ticketsTable = new javax.swing.JTable();
        btnNuevo = new javax.swing.JButton();
        btnEditar = new javax.swing.JButton();
        btnBorrar = new javax.swing.JButton();

        setBackground(new java.awt.Color(102, 255, 255));
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        lblTituloForm.setFont(new java.awt.Font("Nirmala UI", 1, 24)); // NOI18N
        lblTituloForm.setText("Listado de Tickets");

        ticketsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nro Ticket", "Usuario", "Descripción", "Fecha Emisión", "Fecha Inicio", "Fecha Fin", "Estado", "Producto", "Dias Estimados", "Prioridad"
            }
        ));
        jScrollPane1.setViewportView(ticketsTable);

        btnNuevo.setBackground(new java.awt.Color(153, 204, 0));
        btnNuevo.setFont(new java.awt.Font("Nirmala UI", 1, 14)); // NOI18N
        btnNuevo.setForeground(new java.awt.Color(255, 255, 255));
        btnNuevo.setText("Nuevo");
        btnNuevo.setBorder(null);
        btnNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoActionPerformed(evt);
            }
        });
        btnNuevo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                btnNuevoKeyReleased(evt);
            }
        });

        btnEditar.setBackground(new java.awt.Color(102, 204, 255));
        btnEditar.setFont(new java.awt.Font("Nirmala UI", 1, 14)); // NOI18N
        btnEditar.setForeground(new java.awt.Color(255, 255, 255));
        btnEditar.setText("Editar");
        btnEditar.setBorder(null);
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });
        btnEditar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                btnEditarKeyReleased(evt);
            }
        });

        btnBorrar.setBackground(java.awt.Color.red);
        btnBorrar.setFont(new java.awt.Font("Nirmala UI", 1, 14)); // NOI18N
        btnBorrar.setForeground(new java.awt.Color(255, 255, 255));
        btnBorrar.setText("Borrar");
        btnBorrar.setBorder(null);
        btnBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBorrarActionPerformed(evt);
            }
        });
        btnBorrar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                btnBorrarKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblTituloForm)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 549, Short.MAX_VALUE))
                            .addComponent(jScrollPane1)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnNuevo, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnBorrar, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(22, 22, 22))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(lblTituloForm)
                .addGap(10, 10, 10)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 608, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBorrar, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnNuevo, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        cargarTabla();                    
    }//GEN-LAST:event_formComponentShown

    private void btnNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoActionPerformed
        nuevoRegistro();
    }//GEN-LAST:event_btnNuevoActionPerformed

    private void btnNuevoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnNuevoKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_btnNuevoKeyReleased

    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed
        editarRegistro();
    }//GEN-LAST:event_btnEditarActionPerformed

    private void btnEditarKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnEditarKeyReleased
        editarRegistro();
    }//GEN-LAST:event_btnEditarKeyReleased

    private void btnBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBorrarActionPerformed
        borrarRegistro();
    }//GEN-LAST:event_btnBorrarActionPerformed

    private void btnBorrarKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnBorrarKeyReleased
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            borrarRegistro();
        }
    }//GEN-LAST:event_btnBorrarKeyReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBorrar;
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton btnNuevo;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblTituloForm;
    private javax.swing.JTable ticketsTable;
    // End of variables declaration//GEN-END:variables

    private void cargarTabla() {
        
        SimpleDateFormat df = new SimpleDateFormat("dd/MM/yyyy");
        
        Connection cn = DBConnection.conectarDB();
        DefaultTableModel dt = (DefaultTableModel) ticketsTable.getModel();
        dt.setRowCount(0);
        if(cn == null){
            JOptionPane.showMessageDialog(this,"No hay conexión a la BD");
        }else{
            try{
                // sentencia sql para buscar todos los productos
                String sql ="Select t.ID_TICKET,\n" +
                    "	   u.NOMBRE+' '+u.APELLIDO as NOMBREAPELLIDO, \n" +
                    "	   t.DESCRIPCION,\n" +
                    "	   t.FECHA_EMISION,\n" +
                    "	   t.FECHA_INICIO,\n" +
                    "	   t.FECHA_FIN,\n" +
                    "	   t.ESTADO,\n" +
                    "	   p.NOMBRE_PRODUCTO as PRODUCTO,\n" +
                    "	   t.DIAS_ESTIMADO,\n" +
                    "	   t.PRIORIDAD\n" +
                    "	   from TICKETS t\n" +
                    "inner join USUARIOS u on t.ID_USUARIO = u.ID_USUARIO\n" +
                    "inner join PRODUCTOS p on t.ID_PRODUCTO = p.ID_PRODUCTO";
                // prepara la sentencia sql para dar mayor seguridad a la aplicación
                PreparedStatement st = (PreparedStatement) cn.prepareStatement(sql);
                

                // ejecuta la consulta y guarda el resultado en una variable tipo result set
                ResultSet rs = st.executeQuery();
                // si el result set tiene registros (nos logueamos correctamente)
                while(rs.next()){
                    //carga el id del producto en la variable id
                    //String id = String.valueOf(rs.getInt("id_producto"));
                    // carga el nombre del producto en la variable nombre
                    //String nombre = rs.getString("nombre_producto");
                    
                    Date fecha;
                    String fechaEmision = "";
                    String fechaInicio = "";
                    String fechaFin = "";
                    fecha = rs.getDate("fecha_emision");
                    if(!(fecha == null)){
                        fechaEmision = df.format(fecha);
                    }
                    
                    fecha = rs.getDate("fecha_inicio");
                    if(!(fecha == null)){
                        fechaInicio = df.format(fecha);
                    }
                    
                    fecha = rs.getDate("fecha_fin");
                    if(!(fecha == null)){
                        fechaFin = df.format(fecha);
                    }
                    
                    String estado;
                    estado = switch (rs.getString("estado")) {
                        case "C" -> "Cerrado";
                        case "A" -> "Abierto";
                        default -> "Pendiente";
                    };
                         
                    String prioridad;
                    prioridad = switch(rs.getString("prioridad")){
                        case "A" -> "Alta";
                        case "M" -> "Media";
                        default -> "Baja";
                    };
                    
                    String datosTabla[] = {
                        String.valueOf(rs.getInt("id_ticket")),
                        rs.getString("nombreapellido"),
                        rs.getString("descripcion"),
                        fechaEmision,
                        fechaInicio,
                        fechaFin,
                        estado,
                        rs.getString("producto"),
                        String.valueOf(rs.getInt("dias_estimado")),
                        prioridad,
                    };
                    
                    dt.addRow(datosTabla);
                }
            }catch(SQLException ex){
                JOptionPane.showMessageDialog(this,ex.getMessage());
            }
        }
    }
    
    private void borrarRegistro() {
        DefaultTableModel model = (DefaultTableModel) ticketsTable.getModel();
        int a = ticketsTable.getSelectedRow();
        OperacionesRegistros.eliminar(model, a, "sp_borrar_ticket");
    }

    private void editarRegistro() {
        // obtener el id del registro a editar
        //DefaultTableModel model = (DefaultTableModel) productosTable.getModel();
        int a = ticketsTable.getSelectedRow();
        if(a < 0)
        {
            JOptionPane.showMessageDialog(
                    null, 
                    "Debe seleccionar un registro",
                    "Chake",
                    JOptionPane.WARNING_MESSAGE);
        }else{
            OperacionesRegistros.idRegistroEditar = Integer.parseInt(ticketsTable.getValueAt(a, 0).toString()) ;
            // encuentra el Panel padre
            cardsPanel = (JPanel) btnNuevo.getParent().getParent();
            // define el nombre botón del menú que va a quedar activo, en este caso debe ser btnEditarProducto
            ControladorMenu.nombreMenuNuevo = "btnEditarTicket";
            // cambiar de color el botón activo
            ControladorMenu.cambiarBotonActivo(cardsPanel);
            // trae el layout del pnael padre
            CardLayout cardLayout = (CardLayout) cardsPanel.getLayout();
            // cambia el formulario pasando el objeto del nuevo form (en este caso productoEditarForm) y pasa un nuevo nombre para poder identificarlo, en este caso editarProducto
            ControladorMenu.cambiarFormulario(cardLayout, cardsPanel, ticketEditarForm, "editarTicket");
        }
    }

    private void nuevoRegistro() {
        // encuentra el Panel padre
        cardsPanel = (JPanel) btnNuevo.getParent().getParent();
        // define el nombre botón del menú que va a quedar activo, en este caso debe ser btnNuevoProducto
        ControladorMenu.nombreMenuNuevo = "btnNuevoTicket";
        // cambiar de color el botón activo
        ControladorMenu.cambiarBotonActivo(cardsPanel);
        // trae el layout del pnael padre
        CardLayout cardLayout = (CardLayout) cardsPanel.getLayout();
        // cambia el formulario y pasa un nuevo nombre para poder identificarlo, en este caso nuevoProducto
        ControladorMenu.cambiarFormulario(cardLayout, cardsPanel, ticketNuevoForm, "nuevoTicket");
    }
    
}
