/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ticketdemil.Formularios;

import global.DBConnection;
import global.PaletaColores;
import jakarta.jms.Connection;
import java.sql.ResultSet;
import java.awt.Color;
import static java.awt.Frame.MAXIMIZED_BOTH;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author antit
 */
public class ClienteVerForm extends javax.swing.JPanel {

    /**
     * Creates new form FrmVerClientes
     */
    public ClienteVerForm() {
        initComponents();
        lblVerClientes.setForeground(Color.RED);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblVerClientes = new javax.swing.JLabel();
        ScrollVerClientes = new javax.swing.JScrollPane();
        tblVerClientes = new javax.swing.JTable();

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        lblVerClientes.setFont(new java.awt.Font("Nirmala UI", 1, 24)); // NOI18N
        lblVerClientes.setText("Ver Clientes");

        tblVerClientes.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        tblVerClientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID_USUARIO", "USERNAME", "NOMBRE", "E-MAIL", "TELÉFONO"
            }
        ));
        ScrollVerClientes.setViewportView(tblVerClientes);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(lblVerClientes))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(ScrollVerClientes)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(lblVerClientes)
                .addGap(18, 18, 18)
                .addComponent(ScrollVerClientes)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        if(tblVerClientes.getRowCount() == 0){
            cargarTabla();
        }
    }//GEN-LAST:event_formComponentShown


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane ScrollVerClientes;
    private javax.swing.JLabel lblVerClientes;
    private javax.swing.JTable tblVerClientes;
    // End of variables declaration//GEN-END:variables

    private void cargarTabla() {
        java.sql.Connection cn = DBConnection.conectarDB();
        if(cn == null){
            JOptionPane.showMessageDialog(this,"No hay conexión a la BD");
        }else{
            try{
                // sentencia sql para buscar todos los clientes
                String sql = "SELECT U.ID_USUARIO, U.USERNAME, U.NOMBRE + ' ' + U.APELLIDO AS NOMBRE, U.EMAIL, U.TELEFONO FROM CLIENTES CL INNER JOIN USUARIOS U ON CL.ID_USUARIO=U.ID_USUARIO";
                // prepara la sentencia sql para dar mayor seguridad a la aplicación
                PreparedStatement st = (PreparedStatement) cn.prepareStatement(sql);
                

                // ejecuta la consulta y guarda el resultado en una variable tipo result set
                ResultSet rs = st.executeQuery();
                // si el result set tiene registros (nos logueamos correctamente)
                while(rs.next()){
                    //carga el id del cliente en la variable id
                    //String id = String.valueOf(rs.getInt("id_producto"));
                    // carga el nombre del producto en la variable nombre
                    //String nombre = rs.getString("nombre_producto");
                    
                    String datosTabla[] = {
                        String.valueOf(rs.getInt("id_usuario")),
                        rs.getString("username"), rs.getString("nombre"), rs.getString("email"), String.valueOf(rs.getInt("telefono"))
                    };
                    DefaultTableModel dt = (DefaultTableModel) tblVerClientes.getModel();
                    dt.addRow(datosTabla);
                }
            }catch(SQLException ex){
                JOptionPane.showMessageDialog(this,ex.getMessage());
            }
        }
    }

}
